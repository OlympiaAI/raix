---
http_interactions:
- request:
    method: post
    uri: https://openrouter.ai/api/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":[{"type":"text","text":"You
        are a modern historian studying trends in modern business. You know the following
        book callsed ''Getting Real'' very well:"},{"type":"text","text":"Introduction\nWhat
        is Getting Real?\nAbout 37signals\nCaveats, disclaimers, and other preemptive
        strikes\n\n\n What is Getting Real?\nWant to build a successful web app? Then
        it’s time to Get Real. Getting Real is a smaller, faster, better way to build
        software.\nGetting Real is about skipping all the stuff that represents real
        (charts, graphs, boxes, arrows, schematics, wireframes, etc.) and actually
        building the real thing.\nGetting real is less. Less mass, less software,
        less features, less paperwork, less of everything that’s not essential (and
        most of what you think is essential actually isn’t).\nGetting Real is staying
        small and being agile.\nGetting Real starts with the interface, the real screens
        that people are going to use. It begins with what the customer actually experiences
        and builds backwards from there.This lets you get the interface right before
        you get the software wrong.\nGetting Real is about iterations and lowering
        the cost of change. Getting Real is all about launching, tweaking, and constantly
        improving which makes it a perfect approach for web-based software.\nGetting
        Real delivers just what customers need and eliminates anything they don’t.\nThe
        benefits of Getting Real\nGetting Real delivers better results because it
        forces you to deal with the actual problems you’re trying to solve instead
        of your ideas about those problems. It forces you to deal with reality.\n\n
        Getting Real foregoes functional specs and other transitory documentation
        in favor of building real screens. A functional spec is make-believe, an illusion
        of agreement, while an actual web page is reality. That’s what your customers
        are going to see and use. That’s what matters. Getting Real gets you there
        faster.\nAnd that means you’re making software decisions based on the real
        thing instead of abstract notions.\nFinally, Getting Real is an approach ideally
        suited to web-based software. The old school model of shipping software in
        a box and then waiting a year or two to deliver an update is fading away.
        Unlike installed software, web apps can constantly evolve on a day-to-day
        basis. Getting Real leverages this advantage for all its worth.\nHow To Write
        Vigorous Software\nVigorous writing is concise.A sentence should contain no
        unnecessary words, a paragraph no unnecessary sentences, for the same reason
        that a drawing should have no unnecessary lines and a machine no unnecessary
        parts.This requires not that the writer make all sentences short or avoid
        all detail and treat subjects only in outline, but that every word tell.\nFrom
        “The Elements of Style” by William Strunk Jr.\nNo more bloat\nThe old way:
        a lengthy, bureaucratic, we’re-doing-this-to-cover- our-asses process. The
        typical result: bloated, forgettable soft- ware dripping with mediocrity.
        Blech.\nGetting Real gets rid of...\nTimelines that take months or even years
        Pie-in-the-sky functional specs Scalability debates\n\n Interminable staff
        meetings\nThe “need” to hire dozens of employees Meaningless version numbers\nPristine
        roadmaps that predict the perfect future Endless preference options\nOutsourced
        support\nUnrealistic user testing\nUseless paperwork\nTop-down hierarchy\nYou
        don’t need tons of money or a huge team or a lengthy development cycle to
        build great software. Those things are the ingredients for slow, murky, changeless
        applications. Getting real takes the opposite approach.\nIn this book we’ll
        show you...\nThe importance of having a philosophy Why staying small is a
        good thing\nHow to build less\nHow to get from idea to reality quickly How
        to staff your team\nWhy you should design from the inside out Why writing
        is so crucial\nWhy you should underdo your competition\n\n How to promote
        your app and spread the word Secrets to successful support\nTips on keeping
        momentum going after launch\n...and lots more\nThe focus is on big-picture
        ideas. We won’t bog you down with detailed code snippets or css tricks. We’ll
        stick to the major ideas and philosophies that drive the Getting Real process.\nIs
        this book for you?\nYou’re an entrepreneur, designer, programmer, or marketer
        working on a big idea.\nYou realize the old rules don’t apply anymore. Distribute
        your software on cd-roms every year? How 2002. Version numbers? Out the window.
        You need to build, launch, and tweak. Then rinse and repeat.\nOr maybe you’re
        not yet on board with agile development and business structures, but you’re
        eager to learn more.\nIf this sounds like you, then this book is for you.\nNote:
        While this book’s emphasis is on building a web app, a lot of these ideas
        are applicable to non-software activities too. The suggestions about small
        teams, rapid prototyping, expect- ing iterations, and many others presented
        here can serve as a guide whether you’re starting a business, writing a book,
        designing a web site, recording an album, or doing a variety\nof other endeavors.
        Once you start Getting Real in one area of your life, you’ll see how these
        concepts can apply to a wide range of activities.\n\n About 37signals\nWhat
        we do\n37signals is a small team that creates simple, focused software. Our
        products help you collaborate and get organized. More than 350,000 people
        and small businesses use our web-apps to get things done. Jeremy Wagstaff,
        of the Wall Street Journal, wrote, “37signals products are beautifully simple,
        elegant and intuitive tools that make an Outlook screen look like the soft-
        ware equivalent of a torture chamber.” Our apps never put you on the rack.\nOur
        modus operandi\nWe believe software is too complex. Too many features, too
        many buttons, too much to learn. Our products do less than the competition
        – intentionally. We build products that work smarter, feel better, allow you
        to do things your way, and are easier to use.\nOur products\nAs of the publishing
        date of this book, we have five commercial products and one open source web
        application framework.\nBasecamp turns project management on its head. Instead
        of Gantt charts, fancy graphs, and stats-heavy spreadsheets, Base- camp offers
        message boards, to-do lists, simple scheduling, col- laborative writing, and
        file sharing. So far, hundreds of thou- sands agree it’s a better way. Farhad
        Manjoo of Salon.com said\n“Basecamp represents the future of software on the
        Web.”\n\n Campfire brings simple group chat to the business setting. Businesses
        in the know understand how valuable real-time persistent group chat can be.
        Conventional instant messaging is great for quick 1-on-1 chats, but it’s miserable
        for 3 or more people at once. Campfire solves that problem and plenty more.\nBackpack
        is the alternative to those confusing, complex, “orga- nize your life in 25
        simple steps” personal information managers. Backpack’s simple take on pages,
        notes, to-dos, and cellphone/ email-based reminders is a novel idea in a product
        category that suffers from status-quo-itis. Thomas Weber of the Wall Street
        Journal said it’s the best product in its class and David Pogue of the New
        York Times called it a “very cool” organization tool.\nWriteboard lets you
        write, share, revise, and compare text\nsolo or with others. It’s the refreshing
        alternative to bloated word processors that are overkill for 95% of what you
        write. John Gruber of Daring Fireball said, “Writeboard might be the clearest,
        simplest web application I’ve ever seen.” Web-guru Jeffrey Zeldman said, “The
        brilliant minds at 37signals have done it again.”\nTa-da List keeps all your
        to-do lists together and organized online. Keep the lists to yourself or share
        them with others for easy collaboration. There’s no easier way to get things
        done. Over 100,000 lists with nearly 1,000,000 items have been created so
        far.\nRuby on Rails, for developers, is a full-stack, open-source web framework
        in Ruby for writing real-world applications quickly and easily. Rails takes
        care of the busy work so you can focus on your idea. Nathan Torkington of
        the O’Reilly publish- ing empire said “Ruby on Rails is astounding. Using
        it is like watching a kung-fu movie, where a dozen bad-ass frameworks prepare
        to beat up the little newcomer only to be handed their asses in a variety
        of imaginative ways.” Gotta love that quote.\n\n Caveats, disclaimers, and
        other preemptive strikes\nJust to get it out of the way, here are our responses
        to some com- plaints we hear every now and again:\n“These techniques won’t
        work for me.”\nGetting real is a system that’s worked terrifically for us.
        That said, the ideas in this book won’t apply to every project under the sun.
        If you are building a weapons system, a nuclear control plant, a banking system
        for millions of customers, or some other life/finance-critical system, you’re
        going to balk at some of our laissez-faire attitude. Go ahead and take additional
        precautions.\nAnd it doesn’t have to be an all or nothing proposition. Even
        if you can’t embrace Getting Real fully, there are bound to be at least a
        few ideas in here you can sneak past the powers that be.\n“You didn’t invent
        that idea.”\nWe’re not claiming to have invented these techniques. Many of
        these concepts have been around in one form or another for a long time. Don’t
        get huffy if you read some\nof our advice and it reminds you of something
        you read about already on so and so’s weblog or in some book pub- lished 20
        years ago. It’s definitely possible. These tech- niques are not at all exclusive
        to 37signals. We’re just telling you how we work and what’s been successful
        for us.\n\n “You take too much of a black and white view.”\nIf our tone seems
        too know-it-allish, bear with us. We think it’s better to present ideas in
        bold strokes than to be wishy-washy about it. If that comes off as cocky or
        arrogant, so be it. We’d rather be provocative than water everything down
        with “it depends...” Of course there will be times when these rules need to
        be stretched or broken. And some of these tactics may not apply to your situation.
        Use your judgement and imagination.\n“This won’t work inside my company.”\nThink
        you’re too big to Get Real? Even Microsoft is Getting Real (and we doubt you’re
        bigger than them).\nEven if your company typically runs on long-term schedules
        with big teams, there are still ways to get real.The first step is\nto break
        up into smaller units. When there’s too many people involved, nothing gets
        done. The leaner you are, the faster – and better – things get done.\nGranted,
        it may take some salesmanship. Pitch your company on the Getting Real process.
        Show them this book. Show them the real results you can achieve in less time
        and with a smaller team.\nExplain that Getting Real is a low-risk, low-investment
        way to test new concepts. See if you can split off from the mothership on
        a smaller project as a proof of concept. Demonstrate results.\nOr, if you
        really want to be ballsy, go stealth. Fly under the radar and demonstrate
        real results. That’s the approach the Start.com team has used while Getting
        Real at Microsoft. “I’ve watched the Start.com team work. They don’t ask permission,”
        says Robert Scoble, Technical Evangelist at Microsoft. “They have a boss that
        provides air cover. And they bite off a little bit at a time and do that and
        respond to feedback.”\n\n   Shipping Microsoft’s Start.com\nIn big companies,
        processes and meetings are the norm. Many months are spent on planning features
        and arguing details with the goal of everyone reaching an agreement on what
        is the “right” thing for the customer.\nThat may be the right approach for
        shrink-wrapped software, but with the web we have an incredible advantage.
        Just ship it! Let the user tell you if it’s the right thing and if it’s not,
        hey you can fix it and ship it to the web the same day if you want! There
        is no word stronger than the customer’s – resist the urge to engage in long-winded
        meetings and arguments. Just ship it and prove a point.\nMuch easier said
        than done – this implies:\nMonths of planning are not necessary.\nMonths of
        writing specs are not necessary – specs should have the foundations nailed
        and details figured out and refined during the development phase. Don’t try
        to close all open issues and nail every single detail before development starts.\nShip
        less features, but quality features.\nYou don’t need a big bang approach with
        a whole new release and bunch of features. Give the users byte-size pieces
        that they can digest.\nIf there are minor bugs, ship it as soon you have the
        core scenarios nailed and ship the bug fixes to web gradually after that.The
        faster you get the user feedback the better. Ideas can sound great on paper
        but in practice turn out to be suboptimal.The sooner you find out about fundamental
        issues that are wrong with an idea, the better.\nOnce you iterate quickly
        and react on customer feedback, you will establish a customer connection.
        Remember the goal is to win the customer by building what they want.\n-Sanaz
        Ahari, Program Manager of Start.com, Microsoft\n\n\n  The Starting Line\nBuild
        Less\nWhat’s Your Problem?\nFund Yourself\nFix Time and Budget, Flex Scope
        Have an Enemy\nIt Shouldn’t be a Chore\n\n\n Build Less\nUnderdo your competition\nConventional
        wisdom says that to beat your competitors you need to one-up them. If they
        have four features, you need five (or 15, or 25). If they’re spending x, you
        need to spend xx. If they have 20, you need 30.\nThis sort of one-upping Cold
        War mentality is a dead-end. It’s an expensive, defensive, and paranoid way
        of building products. Defensive, paranoid companies can’t think ahead, they
        can only think behind. They don’t lead, they follow.\nIf you want to build
        a company that follows, you might as well put down this book now.\nSo what
        to do then? The answer is less. Do less than your com- petitors to beat them.
        Solve the simple problems and leave the hairy, difficult, nasty problems to
        everyone else. Instead of one- upping, try one-downing. Instead of outdoing,
        try underdoing.\nWe’ll cover the concept of less throughout this book, but
        for starters, less means:\nLess features\nLess options/preferences\nLess people
        and corporate structure Less meetings and abstractions\nLess promises\n\n\n
        What’s Your Problem?\nBuild software for yourself\nA great way to build software
        is to start out by solving your own problems. You’ll be the target audience
        and you’ll know what’s important and what’s not. That gives you a great head
        start on delivering a breakout product.\nThe key here is understanding that
        you’re not alone. If you’re having this problem, it’s likely hundreds of thousands
        of others are in the same boat. There’s your market. Wasn’t that easy?\nBasecamp
        originated in a problem: As a design firm we needed a simple way to communicate
        with our clients about projects. We started out doing this via client ex-
        tranets which we would update manually. But changing the html by hand every
        time a project needed to be updated just wasn’t working. These project sites
        always seemed to go stale and eventually were abandoned. It was frustrating
        because it left us disorganized and left clients in the dark.\nSo we started
        looking at other options. Yet every tool we found either 1) didn’t do what
        we needed or 2) was bloated with fea- tures we didn’t need – like billing,
        strict access controls, charts, graphs, etc. We knew there had to be a better
        way so we decided to build our own.\nWhen you solve your own problem, you
        create a tool that you’re passionate about. And passion is key. Passion means
        you’ll truly use it and care about it. And that’s the best way to get others
        to feel passionate about it too.\n\n   Scratching your own itch\nThe Open
        Source world embraced this mantra a long time ago – they call it “scratching
        your own itch.” For the open source developers, it means they get the tools
        they want, delivered the way they want them. But the benefit goes much deeper.\nAs
        the designer or developer of a new application, you’re faced with hundreds
        of micro-decisions each and every day: blue or green? One table or two? Static
        or dynamic? Abort or recover? How do we make these decisions? If it’s something
        we recognize as being important, we might ask.The rest, we guess.And all that
        guessing builds up a kind of debt in our applications – an interconnected
        web of assumptions.\nAs a developer, I hate this.The knowledge of all these
        small-scale timebombs in the applications I write adds to my stress. Open
        Source developers, scratching their own itches, don’t suffer this. Because
        they are their own users, they know the correct answers to 90% of the decisions
        they have to make. I think this is one of the reasons folks come home after
        a hard day of coding and then work on open source: It’s relaxing.\n–Dave Thomas,
        The Pragmatic Programmers\n\nBorn out of necessity\nCampaign Monitor really
        was born out of necessity. For years we’d been frustrated by the quality of
        the email marketing options out there. One tool would do x and y but never
        z, the next had y\nand z nailed but just couldn’t get x right.We couldn’t
        win.\nWe decided to clear our schedule and have a go at building our dream
        email marketing tool.We consciously decided not to look at what everyone else
        was doing and instead build something that would make ours and our customer’s
        lives a little easier.\nAs it turned out, we weren’t the only ones who were
        unhappy with the options out there.We made a few modifications to the software
        so any design firm could use it and started spreading the word. In less than
        six months, thousands of designers were using Campaign Monitor to send email
        newsletters for themselves and their clients.\n–David Greiner, founder, Campaign
        Monitor\n\n\n   You need to care about it\nWhen you write a book, you need
        to have more than an interesting story. You need to have a desire to tell
        the story.You need to be personally invested in some way. If you’re going
        to live with something for two years, three years, the rest of your life,
        you need to care about it.\n–Malcolm Gladwell, author (from A Few Thin Slices
        of Malcolm Gladwell)\n\n\n Fund Yourself\nOutside money is plan B\nThe first
        priority of many startups is acquiring funding from investors. But remember,
        if you turn to outsiders for funding, you’ll have to answer to them too. Expectations
        are raised. Investors want their money back – and quickly. The sad fact is
        cashing in often begins to trump building a quality product.\nThese days it
        doesn’t take much to get rolling. Hardware\nis cheap and plenty of great infrastructure
        software is open source and free. And passion doesn’t come with a price tag.\nSo
        do what you can with the cash on hand. Think hard and determine what’s really
        essential and what you can do without. What can you do with three people instead
        of ten? What can you do with $20k instead of $100k? What can you do in three
        months instead of six? What can you do if you keep your day job and build
        your app on the side?\nConstraints force creativity\nRun on limited resources
        and you’ll be forced to reckon with constraints earlier and more intensely.
        And that’s a good thing. Constraints drive innovation.\n\n\n Constraints also
        force you to get your idea out in the wild sooner rather than later – another
        good thing. A month or two out of the gates you should have a pretty good
        idea of whether you’re onto something or not. If you are, you’ll be self-sustain-
        able shortly and won’t need external cash. If your idea’s a lemon, it’s time
        to go back to the drawing board. At least you know now as opposed to months
        (or years) down the road. And at least you can back out easily. Exit plans
        get a lot trickier once inves- tors are involved.\nIf you’re creating software
        just to make a quick buck, it will show. Truth is a quick payout is pretty
        unlikely. So focus on building a quality tool that you and your customers
        can live with for a long time.\n\nTwo paths\n[Jake Walker started one company
        with investor money (Disclive) and one without (The Show). Here he discusses
        the differences between the two paths.]\n\nThe root of all the problems wasn’t
        raising money itself, but everything that came along with it.The expectations
        are simply higher. People start taking salary, and the motivation is to build
        it up and sell it, or find some other way for the initial investors to make
        their money back. In the case of the first company,\nwe simply started acting
        much bigger than we were – out of necessity...\n[With The Show] we realized
        that we could deliver a much better product with less costs, only with more
        time. And we gambled with a bit of our own money that people would be willing
        to wait for quality over speed. But the company has stayed (and will likely
        continue to be) a small operation.And ever since that first project, we’ve
        been fully self funded.With just a bit of creative terms from our vendors,
        we’ve never really need to put much of our own money into the operation at
        all.And the expectation isn’t to grow and sell,but to grow for the sake of
        growth and to continue to benefit from it financially.\n–A comment from Signal
        vs. Noise\n\n","cache_control":{"type":"ephemeral"}}]},{"role":"user","content":"What
        is the meaning of Getting Real according to the book? Begin your response
        with According to the book,"}],"model":"anthropic/claude-3-haiku","max_tokens":1000,"temperature":0.0}'
    headers:
      Authorization:
      - Bearer REDACTED
      Content-Type:
      - application/json
      X-Title:
      - OpenRouter Ruby Client
      Http-Referer:
      - https://github.com/OlympiaAI/open_router
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 11 Nov 2024 01:37:32 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cf-Placement:
      - local-EWR
      X-Clerk-Auth-Message:
      - Invalid JWT form. A JWT consists of three parts separated by dots. (reason=token-invalid,
        token-carrier=header)
      X-Clerk-Auth-Reason:
      - token-invalid
      X-Clerk-Auth-Status:
      - signed-out
      Vary:
      - Accept-Encoding
      Server:
      - cloudflare
      Cf-Ray:
      - 8e0a8ec0afb719c7-EWR
    body:
      encoding: ASCII-8BIT
      string: "\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n{\"id\":\"gen-1731289052-M1FmaSIlmErrMNX8ZSCb\",\"provider\":\"Anthropic\",\"model\":\"anthropic/claude-3-haiku\",\"object\":\"chat.completion\",\"created\":1731289052,\"choices\":[{\"logprobs\":null,\"finish_reason\":\"end_turn\",\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\"According
        to the book, \\\"Getting Real\\\" is \\\"a smaller, faster, better way to
        build software.\\\" The key principles of Getting Real include:\\n\\n1. Skipping
        the abstract planning and documentation (like functional specs, wireframes,
        etc.) and instead focusing on building the actual product.\\n\\n2. Doing less
        - less features, less options, less people, less meetings, etc. The goal is
        to be lean and agile rather than bloated and bureaucratic.\\n\\n3. Starting
        with the user interface and customer experience, and building backwards from
        there. This ensures the product is focused on solving real user problems.\\n\\n4.
        Embracing an iterative, launch-and-improve approach rather than trying to
        perfect everything upfront. Web-based software can be constantly updated,
        so the focus is on getting something out there quickly and refining it based
        on user feedback.\\n\\n5. Avoiding the traditional software development process
        of lengthy timelines, big teams, and extensive planning in favor of a more
        nimble, resource-constrained approach.\\n\\nThe core idea is to be pragmatic,
        focus on the essentials, and get the actual product in front of users as quickly
        as possible, rather than getting bogged down in abstract planning and documentation.
        This \\\"getting real\\\" approach is presented as an effective way to build
        successful web-based software.\",\"refusal\":\"\"}}],\"usage\":{\"prompt_tokens\":4884,\"completion_tokens\":285,\"total_tokens\":5169}}"
  recorded_at: Mon, 11 Nov 2024 01:37:35 GMT
- request:
    method: post
    uri: https://openrouter.ai/api/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":[{"type":"text","text":"You
        are a modern historian studying trends in modern business. You know the following
        book callsed ''Getting Real'' very well:"},{"type":"text","text":"Introduction\nWhat
        is Getting Real?\nAbout 37signals\nCaveats, disclaimers, and other preemptive
        strikes\n\n\n What is Getting Real?\nWant to build a successful web app? Then
        it’s time to Get Real. Getting Real is a smaller, faster, better way to build
        software.\nGetting Real is about skipping all the stuff that represents real
        (charts, graphs, boxes, arrows, schematics, wireframes, etc.) and actually
        building the real thing.\nGetting real is less. Less mass, less software,
        less features, less paperwork, less of everything that’s not essential (and
        most of what you think is essential actually isn’t).\nGetting Real is staying
        small and being agile.\nGetting Real starts with the interface, the real screens
        that people are going to use. It begins with what the customer actually experiences
        and builds backwards from there.This lets you get the interface right before
        you get the software wrong.\nGetting Real is about iterations and lowering
        the cost of change. Getting Real is all about launching, tweaking, and constantly
        improving which makes it a perfect approach for web-based software.\nGetting
        Real delivers just what customers need and eliminates anything they don’t.\nThe
        benefits of Getting Real\nGetting Real delivers better results because it
        forces you to deal with the actual problems you’re trying to solve instead
        of your ideas about those problems. It forces you to deal with reality.\n\n
        Getting Real foregoes functional specs and other transitory documentation
        in favor of building real screens. A functional spec is make-believe, an illusion
        of agreement, while an actual web page is reality. That’s what your customers
        are going to see and use. That’s what matters. Getting Real gets you there
        faster.\nAnd that means you’re making software decisions based on the real
        thing instead of abstract notions.\nFinally, Getting Real is an approach ideally
        suited to web-based software. The old school model of shipping software in
        a box and then waiting a year or two to deliver an update is fading away.
        Unlike installed software, web apps can constantly evolve on a day-to-day
        basis. Getting Real leverages this advantage for all its worth.\nHow To Write
        Vigorous Software\nVigorous writing is concise.A sentence should contain no
        unnecessary words, a paragraph no unnecessary sentences, for the same reason
        that a drawing should have no unnecessary lines and a machine no unnecessary
        parts.This requires not that the writer make all sentences short or avoid
        all detail and treat subjects only in outline, but that every word tell.\nFrom
        “The Elements of Style” by William Strunk Jr.\nNo more bloat\nThe old way:
        a lengthy, bureaucratic, we’re-doing-this-to-cover- our-asses process. The
        typical result: bloated, forgettable soft- ware dripping with mediocrity.
        Blech.\nGetting Real gets rid of...\nTimelines that take months or even years
        Pie-in-the-sky functional specs Scalability debates\n\n Interminable staff
        meetings\nThe “need” to hire dozens of employees Meaningless version numbers\nPristine
        roadmaps that predict the perfect future Endless preference options\nOutsourced
        support\nUnrealistic user testing\nUseless paperwork\nTop-down hierarchy\nYou
        don’t need tons of money or a huge team or a lengthy development cycle to
        build great software. Those things are the ingredients for slow, murky, changeless
        applications. Getting real takes the opposite approach.\nIn this book we’ll
        show you...\nThe importance of having a philosophy Why staying small is a
        good thing\nHow to build less\nHow to get from idea to reality quickly How
        to staff your team\nWhy you should design from the inside out Why writing
        is so crucial\nWhy you should underdo your competition\n\n How to promote
        your app and spread the word Secrets to successful support\nTips on keeping
        momentum going after launch\n...and lots more\nThe focus is on big-picture
        ideas. We won’t bog you down with detailed code snippets or css tricks. We’ll
        stick to the major ideas and philosophies that drive the Getting Real process.\nIs
        this book for you?\nYou’re an entrepreneur, designer, programmer, or marketer
        working on a big idea.\nYou realize the old rules don’t apply anymore. Distribute
        your software on cd-roms every year? How 2002. Version numbers? Out the window.
        You need to build, launch, and tweak. Then rinse and repeat.\nOr maybe you’re
        not yet on board with agile development and business structures, but you’re
        eager to learn more.\nIf this sounds like you, then this book is for you.\nNote:
        While this book’s emphasis is on building a web app, a lot of these ideas
        are applicable to non-software activities too. The suggestions about small
        teams, rapid prototyping, expect- ing iterations, and many others presented
        here can serve as a guide whether you’re starting a business, writing a book,
        designing a web site, recording an album, or doing a variety\nof other endeavors.
        Once you start Getting Real in one area of your life, you’ll see how these
        concepts can apply to a wide range of activities.\n\n About 37signals\nWhat
        we do\n37signals is a small team that creates simple, focused software. Our
        products help you collaborate and get organized. More than 350,000 people
        and small businesses use our web-apps to get things done. Jeremy Wagstaff,
        of the Wall Street Journal, wrote, “37signals products are beautifully simple,
        elegant and intuitive tools that make an Outlook screen look like the soft-
        ware equivalent of a torture chamber.” Our apps never put you on the rack.\nOur
        modus operandi\nWe believe software is too complex. Too many features, too
        many buttons, too much to learn. Our products do less than the competition
        – intentionally. We build products that work smarter, feel better, allow you
        to do things your way, and are easier to use.\nOur products\nAs of the publishing
        date of this book, we have five commercial products and one open source web
        application framework.\nBasecamp turns project management on its head. Instead
        of Gantt charts, fancy graphs, and stats-heavy spreadsheets, Base- camp offers
        message boards, to-do lists, simple scheduling, col- laborative writing, and
        file sharing. So far, hundreds of thou- sands agree it’s a better way. Farhad
        Manjoo of Salon.com said\n“Basecamp represents the future of software on the
        Web.”\n\n Campfire brings simple group chat to the business setting. Businesses
        in the know understand how valuable real-time persistent group chat can be.
        Conventional instant messaging is great for quick 1-on-1 chats, but it’s miserable
        for 3 or more people at once. Campfire solves that problem and plenty more.\nBackpack
        is the alternative to those confusing, complex, “orga- nize your life in 25
        simple steps” personal information managers. Backpack’s simple take on pages,
        notes, to-dos, and cellphone/ email-based reminders is a novel idea in a product
        category that suffers from status-quo-itis. Thomas Weber of the Wall Street
        Journal said it’s the best product in its class and David Pogue of the New
        York Times called it a “very cool” organization tool.\nWriteboard lets you
        write, share, revise, and compare text\nsolo or with others. It’s the refreshing
        alternative to bloated word processors that are overkill for 95% of what you
        write. John Gruber of Daring Fireball said, “Writeboard might be the clearest,
        simplest web application I’ve ever seen.” Web-guru Jeffrey Zeldman said, “The
        brilliant minds at 37signals have done it again.”\nTa-da List keeps all your
        to-do lists together and organized online. Keep the lists to yourself or share
        them with others for easy collaboration. There’s no easier way to get things
        done. Over 100,000 lists with nearly 1,000,000 items have been created so
        far.\nRuby on Rails, for developers, is a full-stack, open-source web framework
        in Ruby for writing real-world applications quickly and easily. Rails takes
        care of the busy work so you can focus on your idea. Nathan Torkington of
        the O’Reilly publish- ing empire said “Ruby on Rails is astounding. Using
        it is like watching a kung-fu movie, where a dozen bad-ass frameworks prepare
        to beat up the little newcomer only to be handed their asses in a variety
        of imaginative ways.” Gotta love that quote.\n\n Caveats, disclaimers, and
        other preemptive strikes\nJust to get it out of the way, here are our responses
        to some com- plaints we hear every now and again:\n“These techniques won’t
        work for me.”\nGetting real is a system that’s worked terrifically for us.
        That said, the ideas in this book won’t apply to every project under the sun.
        If you are building a weapons system, a nuclear control plant, a banking system
        for millions of customers, or some other life/finance-critical system, you’re
        going to balk at some of our laissez-faire attitude. Go ahead and take additional
        precautions.\nAnd it doesn’t have to be an all or nothing proposition. Even
        if you can’t embrace Getting Real fully, there are bound to be at least a
        few ideas in here you can sneak past the powers that be.\n“You didn’t invent
        that idea.”\nWe’re not claiming to have invented these techniques. Many of
        these concepts have been around in one form or another for a long time. Don’t
        get huffy if you read some\nof our advice and it reminds you of something
        you read about already on so and so’s weblog or in some book pub- lished 20
        years ago. It’s definitely possible. These tech- niques are not at all exclusive
        to 37signals. We’re just telling you how we work and what’s been successful
        for us.\n\n “You take too much of a black and white view.”\nIf our tone seems
        too know-it-allish, bear with us. We think it’s better to present ideas in
        bold strokes than to be wishy-washy about it. If that comes off as cocky or
        arrogant, so be it. We’d rather be provocative than water everything down
        with “it depends...” Of course there will be times when these rules need to
        be stretched or broken. And some of these tactics may not apply to your situation.
        Use your judgement and imagination.\n“This won’t work inside my company.”\nThink
        you’re too big to Get Real? Even Microsoft is Getting Real (and we doubt you’re
        bigger than them).\nEven if your company typically runs on long-term schedules
        with big teams, there are still ways to get real.The first step is\nto break
        up into smaller units. When there’s too many people involved, nothing gets
        done. The leaner you are, the faster – and better – things get done.\nGranted,
        it may take some salesmanship. Pitch your company on the Getting Real process.
        Show them this book. Show them the real results you can achieve in less time
        and with a smaller team.\nExplain that Getting Real is a low-risk, low-investment
        way to test new concepts. See if you can split off from the mothership on
        a smaller project as a proof of concept. Demonstrate results.\nOr, if you
        really want to be ballsy, go stealth. Fly under the radar and demonstrate
        real results. That’s the approach the Start.com team has used while Getting
        Real at Microsoft. “I’ve watched the Start.com team work. They don’t ask permission,”
        says Robert Scoble, Technical Evangelist at Microsoft. “They have a boss that
        provides air cover. And they bite off a little bit at a time and do that and
        respond to feedback.”\n\n   Shipping Microsoft’s Start.com\nIn big companies,
        processes and meetings are the norm. Many months are spent on planning features
        and arguing details with the goal of everyone reaching an agreement on what
        is the “right” thing for the customer.\nThat may be the right approach for
        shrink-wrapped software, but with the web we have an incredible advantage.
        Just ship it! Let the user tell you if it’s the right thing and if it’s not,
        hey you can fix it and ship it to the web the same day if you want! There
        is no word stronger than the customer’s – resist the urge to engage in long-winded
        meetings and arguments. Just ship it and prove a point.\nMuch easier said
        than done – this implies:\nMonths of planning are not necessary.\nMonths of
        writing specs are not necessary – specs should have the foundations nailed
        and details figured out and refined during the development phase. Don’t try
        to close all open issues and nail every single detail before development starts.\nShip
        less features, but quality features.\nYou don’t need a big bang approach with
        a whole new release and bunch of features. Give the users byte-size pieces
        that they can digest.\nIf there are minor bugs, ship it as soon you have the
        core scenarios nailed and ship the bug fixes to web gradually after that.The
        faster you get the user feedback the better. Ideas can sound great on paper
        but in practice turn out to be suboptimal.The sooner you find out about fundamental
        issues that are wrong with an idea, the better.\nOnce you iterate quickly
        and react on customer feedback, you will establish a customer connection.
        Remember the goal is to win the customer by building what they want.\n-Sanaz
        Ahari, Program Manager of Start.com, Microsoft\n\n\n  The Starting Line\nBuild
        Less\nWhat’s Your Problem?\nFund Yourself\nFix Time and Budget, Flex Scope
        Have an Enemy\nIt Shouldn’t be a Chore\n\n\n Build Less\nUnderdo your competition\nConventional
        wisdom says that to beat your competitors you need to one-up them. If they
        have four features, you need five (or 15, or 25). If they’re spending x, you
        need to spend xx. If they have 20, you need 30.\nThis sort of one-upping Cold
        War mentality is a dead-end. It’s an expensive, defensive, and paranoid way
        of building products. Defensive, paranoid companies can’t think ahead, they
        can only think behind. They don’t lead, they follow.\nIf you want to build
        a company that follows, you might as well put down this book now.\nSo what
        to do then? The answer is less. Do less than your com- petitors to beat them.
        Solve the simple problems and leave the hairy, difficult, nasty problems to
        everyone else. Instead of one- upping, try one-downing. Instead of outdoing,
        try underdoing.\nWe’ll cover the concept of less throughout this book, but
        for starters, less means:\nLess features\nLess options/preferences\nLess people
        and corporate structure Less meetings and abstractions\nLess promises\n\n\n
        What’s Your Problem?\nBuild software for yourself\nA great way to build software
        is to start out by solving your own problems. You’ll be the target audience
        and you’ll know what’s important and what’s not. That gives you a great head
        start on delivering a breakout product.\nThe key here is understanding that
        you’re not alone. If you’re having this problem, it’s likely hundreds of thousands
        of others are in the same boat. There’s your market. Wasn’t that easy?\nBasecamp
        originated in a problem: As a design firm we needed a simple way to communicate
        with our clients about projects. We started out doing this via client ex-
        tranets which we would update manually. But changing the html by hand every
        time a project needed to be updated just wasn’t working. These project sites
        always seemed to go stale and eventually were abandoned. It was frustrating
        because it left us disorganized and left clients in the dark.\nSo we started
        looking at other options. Yet every tool we found either 1) didn’t do what
        we needed or 2) was bloated with fea- tures we didn’t need – like billing,
        strict access controls, charts, graphs, etc. We knew there had to be a better
        way so we decided to build our own.\nWhen you solve your own problem, you
        create a tool that you’re passionate about. And passion is key. Passion means
        you’ll truly use it and care about it. And that’s the best way to get others
        to feel passionate about it too.\n\n   Scratching your own itch\nThe Open
        Source world embraced this mantra a long time ago – they call it “scratching
        your own itch.” For the open source developers, it means they get the tools
        they want, delivered the way they want them. But the benefit goes much deeper.\nAs
        the designer or developer of a new application, you’re faced with hundreds
        of micro-decisions each and every day: blue or green? One table or two? Static
        or dynamic? Abort or recover? How do we make these decisions? If it’s something
        we recognize as being important, we might ask.The rest, we guess.And all that
        guessing builds up a kind of debt in our applications – an interconnected
        web of assumptions.\nAs a developer, I hate this.The knowledge of all these
        small-scale timebombs in the applications I write adds to my stress. Open
        Source developers, scratching their own itches, don’t suffer this. Because
        they are their own users, they know the correct answers to 90% of the decisions
        they have to make. I think this is one of the reasons folks come home after
        a hard day of coding and then work on open source: It’s relaxing.\n–Dave Thomas,
        The Pragmatic Programmers\n\nBorn out of necessity\nCampaign Monitor really
        was born out of necessity. For years we’d been frustrated by the quality of
        the email marketing options out there. One tool would do x and y but never
        z, the next had y\nand z nailed but just couldn’t get x right.We couldn’t
        win.\nWe decided to clear our schedule and have a go at building our dream
        email marketing tool.We consciously decided not to look at what everyone else
        was doing and instead build something that would make ours and our customer’s
        lives a little easier.\nAs it turned out, we weren’t the only ones who were
        unhappy with the options out there.We made a few modifications to the software
        so any design firm could use it and started spreading the word. In less than
        six months, thousands of designers were using Campaign Monitor to send email
        newsletters for themselves and their clients.\n–David Greiner, founder, Campaign
        Monitor\n\n\n   You need to care about it\nWhen you write a book, you need
        to have more than an interesting story. You need to have a desire to tell
        the story.You need to be personally invested in some way. If you’re going
        to live with something for two years, three years, the rest of your life,
        you need to care about it.\n–Malcolm Gladwell, author (from A Few Thin Slices
        of Malcolm Gladwell)\n\n\n Fund Yourself\nOutside money is plan B\nThe first
        priority of many startups is acquiring funding from investors. But remember,
        if you turn to outsiders for funding, you’ll have to answer to them too. Expectations
        are raised. Investors want their money back – and quickly. The sad fact is
        cashing in often begins to trump building a quality product.\nThese days it
        doesn’t take much to get rolling. Hardware\nis cheap and plenty of great infrastructure
        software is open source and free. And passion doesn’t come with a price tag.\nSo
        do what you can with the cash on hand. Think hard and determine what’s really
        essential and what you can do without. What can you do with three people instead
        of ten? What can you do with $20k instead of $100k? What can you do in three
        months instead of six? What can you do if you keep your day job and build
        your app on the side?\nConstraints force creativity\nRun on limited resources
        and you’ll be forced to reckon with constraints earlier and more intensely.
        And that’s a good thing. Constraints drive innovation.\n\n\n Constraints also
        force you to get your idea out in the wild sooner rather than later – another
        good thing. A month or two out of the gates you should have a pretty good
        idea of whether you’re onto something or not. If you are, you’ll be self-sustain-
        able shortly and won’t need external cash. If your idea’s a lemon, it’s time
        to go back to the drawing board. At least you know now as opposed to months
        (or years) down the road. And at least you can back out easily. Exit plans
        get a lot trickier once inves- tors are involved.\nIf you’re creating software
        just to make a quick buck, it will show. Truth is a quick payout is pretty
        unlikely. So focus on building a quality tool that you and your customers
        can live with for a long time.\n\nTwo paths\n[Jake Walker started one company
        with investor money (Disclive) and one without (The Show). Here he discusses
        the differences between the two paths.]\n\nThe root of all the problems wasn’t
        raising money itself, but everything that came along with it.The expectations
        are simply higher. People start taking salary, and the motivation is to build
        it up and sell it, or find some other way for the initial investors to make
        their money back. In the case of the first company,\nwe simply started acting
        much bigger than we were – out of necessity...\n[With The Show] we realized
        that we could deliver a much better product with less costs, only with more
        time. And we gambled with a bit of our own money that people would be willing
        to wait for quality over speed. But the company has stayed (and will likely
        continue to be) a small operation.And ever since that first project, we’ve
        been fully self funded.With just a bit of creative terms from our vendors,
        we’ve never really need to put much of our own money into the operation at
        all.And the expectation isn’t to grow and sell,but to grow for the sake of
        growth and to continue to benefit from it financially.\n–A comment from Signal
        vs. Noise\n\n","cache_control":{"type":"ephemeral"}}]},{"role":"user","content":"What
        is the meaning of Getting Real according to the book? Begin your response
        with According to the book,"}],"model":"anthropic/claude-3-haiku","max_tokens":1000,"temperature":0.0}'
    headers:
      Authorization:
      - Bearer REDACTED
      Content-Type:
      - application/json
      X-Title:
      - OpenRouter Ruby Client
      Http-Referer:
      - https://github.com/OlympiaAI/open_router
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 11 Nov 2024 01:37:35 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cf-Placement:
      - local-EWR
      X-Clerk-Auth-Message:
      - Invalid JWT form. A JWT consists of three parts separated by dots. (reason=token-invalid,
        token-carrier=header)
      X-Clerk-Auth-Reason:
      - token-invalid
      X-Clerk-Auth-Status:
      - signed-out
      Vary:
      - Accept-Encoding
      Server:
      - cloudflare
      Cf-Ray:
      - 8e0a8ed5beeade93-EWR
    body:
      encoding: ASCII-8BIT
      string: "\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n\n         \n\n
        \        \n\n         \n\n         \n\n         \n\n         \n{\"id\":\"gen-1731289055-7lM7yhtp335znp1qegkj\",\"provider\":\"Anthropic\",\"model\":\"anthropic/claude-3-haiku\",\"object\":\"chat.completion\",\"created\":1731289055,\"choices\":[{\"logprobs\":null,\"finish_reason\":\"end_turn\",\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\"According
        to the book, \\\"Getting Real\\\" is \\\"a smaller, faster, better way to
        build software.\\\" The key principles of Getting Real include:\\n\\n1. Skipping
        the abstract planning and documentation (like functional specs, wireframes,
        etc.) and instead focusing on building the actual product.\\n\\n2. Doing less
        - less features, less options, less people, less meetings, etc. The goal is
        to be lean and agile rather than bloated and bureaucratic.\\n\\n3. Starting
        with the user interface and customer experience, and building backwards from
        there. This ensures the product is focused on solving real user problems.\\n\\n4.
        Embracing an iterative, launch-and-improve approach rather than trying to
        perfect everything upfront. Web-based software can be constantly updated,
        so the focus is on getting something out there quickly and refining it based
        on user feedback.\\n\\n5. Avoiding the traditional software development process
        of lengthy timelines, big teams, and extensive planning in favor of a more
        nimble, resource-constrained approach.\\n\\nThe core idea is to be pragmatic,
        focus on the essentials, and get the actual product in front of users as quickly
        as possible, rather than getting bogged down in abstract planning and documentation.
        This \\\"getting real\\\" approach is presented as an effective way to build
        successful web-based software.\",\"refusal\":\"\"}}],\"usage\":{\"prompt_tokens\":4884,\"completion_tokens\":285,\"total_tokens\":5169}}"
  recorded_at: Mon, 11 Nov 2024 01:37:38 GMT
- request:
    method: get
    uri: https://openrouter.ai/api/v1/generation?id=gen-1731289055-7lM7yhtp335znp1qegkj
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Authorization:
      - Bearer REDACTED
      Content-Type:
      - application/json
      X-Title:
      - OpenRouter Ruby Client
      Http-Referer:
      - https://github.com/OlympiaAI/open_router
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 11 Nov 2024 01:37:40 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cf-Placement:
      - local-EWR
      X-Clerk-Auth-Message:
      - Invalid JWT form. A JWT consists of three parts separated by dots. (reason=token-invalid,
        token-carrier=header)
      X-Clerk-Auth-Reason:
      - token-invalid
      X-Clerk-Auth-Status:
      - signed-out
      Vary:
      - Accept-Encoding
      Server:
      - cloudflare
      Cf-Ray:
      - 8e0a8ef5dbb79e16-EWR
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"id":"gen-1731289055-7lM7yhtp335znp1qegkj","upstream_id":"msg_01LqVPLhTPzzk2dDSGd826AH","total_cost":0.0004688775,"cache_discount":0.0010926,"provider_name":"Anthropic","created_at":"2024-11-11T01:37:39.137992+00:00","model":"anthropic/claude-3-haiku","app_id":179379,"streamed":true,"cancelled":false,"latency":787,"moderation_latency":230,"generation_time":1905,"finish_reason":"end_turn","tokens_prompt":4538,"tokens_completion":257,"native_tokens_prompt":4884,"native_tokens_completion":285,"native_tokens_reasoning":null,"num_media_prompt":null,"num_media_completion":null,"origin":"https://github.com/OlympiaAI/open_router","usage":0.0004688775}}'
  recorded_at: Mon, 11 Nov 2024 01:37:40 GMT
recorded_with: VCR 6.2.0
